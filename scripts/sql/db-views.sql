-- Transactions view
drop view if exists transactions_view;

create view transactions_view as
select t.id, 
       coalesce(t.name2, t.name) as name, 
       t.amount as amount, 
       t.date, 
       Case
           When t.type='income' Then 'Income'
           when t.type='planned_expense' then 'Planned Expense'
           when t.type='expense' then 'Expense'
           when t.type='investment' then 'Investment'
           when t.type='transfer' then 'Transfer'
           else 'Unknown' END as "type",
       t.amount < 0 as is_outgoing, 
       t.category, 
       a.name as account_name, 
       a.type as account_type,
       to_char(t.date, 'YYYY-MM') as month_year,
       date_part('month', t.date) as month, 
       date_part('year', t.date) as year, 
       extract(quarter FROM t.date) AS quarter,
       t.name as imported_name
from transactions t
left join public.accounts a on t.account_id = a.id;

-- Account balances view
drop view if exists balances_view;

create view balances_view as
select a.id as account_id, 
       a.name as account_name, 
       a.type as account_type, 
       ab.date, 
       ab.balance as balance,
       to_char((ab.date - interval '1 month'), 'YYYY-MM') as month_year,
       date_part('month', ab.date - interval '1 month') as month, 
       date_part('year', ab.date - interval '1 month') as year, 
       extract(quarter FROM ab.date - interval '1 month') AS quarter
from accounts a
left join public.account_balances ab on a.id = ab.account_id;

-- Planned expenses view
drop view if exists planned_expenses_view;

create view planned_expenses_view as
select id,
       name,
       amount,
       description,
       Case
           When period='year' Then round(amount/12)
           else amount END as month_amount,
       Case
           When period='year' Then amount
           else (amount*12) END as year_amount,
       "from" as date_from,
       "to" as date_to,
       period,
       category,
       pe."to" is null or pe."to" > now()
           and pe."from" < now() as active
from planned_expenses pe;

-- Planned expenses months view
drop view if exists planned_expenses_months;

create view planned_expenses_months as
WITH RECURSIVE MonthGenerator AS (
  -- Base case: select all records where from is not null
  SELECT
    id,
    name,
    amount,
    category,
    period,
    "from"::timestamp without time zone AS current_month,
    "to"
  FROM
    planned_expenses pe

  UNION ALL

  -- Recursive case: add one month to the current_month and continue until to
  SELECT
    id,
    name,
    amount,
    category,
    period,
    mg.current_month + INTERVAL '1 month',
    "to"
  FROM
    MonthGenerator mg
  WHERE
    "to" IS NULL AND mg.current_month < date_trunc('month', now())::date - interval '1 month'
    OR
    "to" is not null and mg.current_month + INTERVAL '1 month' <= "to"
)
-- Final select: Get a row for each month generated by the CTE
SELECT
  id,
  name,
  category,
  period,
  amount as amount,
  Case
      When period='year' Then round(amount/12)
      else amount END as month_amount,
  Case
      When period='year' Then amount
      else (amount*12) END as year_amount,
  current_month::date as current_month,
  "to" as date_to
FROM
  MonthGenerator m
ORDER BY
  id, m.current_month;

-- Transactions with PE view
drop view if exists transactions_with_pe;

create view transactions_with_pe as
select
    t.id as t_id,
    t.name as t_name,
    pe.id as pe_id,
    pe.name as pe_name,
    pe.category,
    t.date as date,
    abs(t.amount) as amount,
    pe.amount as pe_amount
from planned_expenses pe
left join public.transactions t on pe.id = t.planned_expense_id;